[0m[[0m[0mdebug[0m] [0m[0m> Exec(testOnly Flight_Assignment_Test, Some(efb75954-2dc0-4b54-973e-ba6e7917d9e2), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / testOnly[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\pyspark\flink_project\Flight_Assignment\target\scala-2.12\classes ...[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\pyspark\flink_project\Flight_Assignment\target\scala-2.12\test-classes ...[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFlight_Assignment_Test:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- totalFlightsPerMonth[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- mostFrequentFlyers based on flight count *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  org.apache.spark.sql.AnalysisException: cannot resolve '`firstName`' given input columns: [passengerId, name];;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m'Project [passengerId#48, 'firstName, 'lastName][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m+- Project [_1#45 AS passengerId#48, _2#46 AS name#49][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m   +- LocalRelation [_1#45, _2#46][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$$nestedInanonfun$checkAnalysis$1$2.applyOrElse(CheckAnalysis.scala:113)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$$nestedInanonfun$checkAnalysis$1$2.applyOrElse(CheckAnalysis.scala:110)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.trees.TreeNode.$anonfun$transformUp$2(TreeNode.scala:280)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:69)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:280)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.plans.QueryPlan.$anonfun$transformExpressionsUp$1(QueryPlan.scala:93)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.plans.QueryPlan.$anonfun$mapExpressions$1(QueryPlan.scala:105)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:69)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpression$1(QueryPlan.scala:105)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- longestRunWithoutUK should calculate the longest run[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- flightsTogether should correctly identify pairs of passengers with more than 3 shared flights[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- flownTogether should find passengers who have flown together more than N times within a date range[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 33 seconds, 215 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 5[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 1, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 4, failed 1, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m*** 1 TEST FAILED ***[0m[0m
[0m[[0m[31merror[0m] [0m[0mFailed tests:[0m
[0m[[0m[31merror[0m] [0m[0m	Flight_Assignment_Test[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mtestOnly[0m) sbt.TestsFailedException: Tests unsuccessful[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 37 s, completed Apr 16, 2025 11:12:23 AM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
